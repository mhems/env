#!/usr/bin/env python3

from sys import stdin
from re import compile, search
from argparse import ArgumentParser

# For usage, provide '-h' flag

HEADER_INDICATOR = 0

def generate_lines(filenames, header=False):
    if filenames:
        for filename in filenames:
            with open(filename, 'r') as file_:
                if header:
                    yield HEADER_INDICATOR
                for line in file_:
                    yield line
    else:
        if header:
            yield HEADER_INDICATOR
        for line in stdin:
            yield line

if __name__ == '__main__':
    parser = ArgumentParser(description="Frequency Summarizer")
    parser.add_argument('-F',
                        default = None,
                        metavar = 'FS',
                        help = 'separate columns by FS')
    parser.add_argument('-c',
                        default = [0],
                        metavar = 'INDEX',
                        nargs = '+',
                        type = int,
                        help = 'pull numbers from column(s) INDEX')
    parser.add_argument('-i',
                        default = False,
                        action = 'store_true',
                        help = 'ignore change in case')
    parser.add_argument('-b',
                        default = False,
                        action = 'store_true',
                        help = 'ignore change in whitespace')
    parser.add_argument('-H',
                        default = False,
                        action = 'store_true',
                        help = 'treat first line of each file as a header')
    parser.add_argument('-I',
                        default = None,
                        metavar = 'RE',
                        help = 'ignore data matching RE regex')
    parser.add_argument('DATA',
                        nargs = '*',
                        help = 'files to operate on or stdin if None')

    args = parser.parse_args()
    indices = args.c
    freq_list = [dict() for _ in range(len(indices))]
    regex = None
    if args.I:
        regex = compile(args.I)
    header_cells = None
    on_header = False

    for line in generate_lines(args.DATA, args.H):
        if line == HEADER_INDICATOR:
            on_header = True
            continue
        if on_header:
            header_cells = list(map(str.strip, line.strip().split(args.F)))
            on_header = False
            continue
        line = line.strip()
        cells = line.split(args.F)
        if args.i:
            cells = list(map(str.lower, cells))
        if args.b:
            cells = list(map(str.strip, cells))
        if (regex is not None and
            any(search(regex, cell) for cell in cells)):
            continue
        for i, index in enumerate(indices):
            if index < len(cells):
                cell = cells[index]
                freq_list[i][cell] = freq_list[i].get(cell, 0) + 1

    for i, index in enumerate(indices):
        if header_cells:
            print(header_cells[index] + ':')
        items = [(k, v) for k, v in freq_list[i].items()]
        items.sort(reverse=True, key=lambda i : i[1])
        max_len = len(str(items[0][1]))
        fmt_str = ' %%%dd %%s' % max_len
        for category, count in items:
            print(fmt_str % (count, category))
        if i < len(indices) - 1:
            print()
